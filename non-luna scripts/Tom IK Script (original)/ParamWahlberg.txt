import numpy as np
import matplotlib.pyplot as plt
from time import time
import sys
import os
from Condition_Initiales import Initial_cond
from math import *

#VenusMHDpy libraries
from VenusMHDpy import SATIRE2SFL
from VenusMHDpy import Equilibriumh5
from VenusMHDpy import Stability
from VenusMHDpy import VMECInput
from VenusMHDpy.Analysis import EigenValues
from VenusMHDpy.library import find_nearest




RunVMEC = True
RunStab = True
ToPlot  = False




#----------------------------------------------------------------------------------------------#
#=======================================VMEC FIXED BOUNDARY====================================#
#----------------------------------------------------------------------------------------------#

Gamma2Norm = []
V0_VA = []
bet = []
Gamma2NormAna = []
Parameter = 'mach'

#List of parameters to vary
if Parameter=='Beta0':
	ParamArray = np.linspace(0.05,0.0066,50)
	xaxis = r'$\beta_0$'
if Parameter=='Triangularity':
	ParamArray = np.linspace(0.00,0.05,10)
	xaxis = r'$Triangularity$'
if Parameter=='qmin':
	ParamArray = np.linspace(0.75,0.98,50)
	xaxis = r'$q_{min}$'
if Parameter=='mach':
	ParamArray = np.linspace(0.00,0.40,30)
	xaxis = r'$\mathcal{M}_0$'

for x in ParamArray:

	#Parameters: !!! Usefull to change Celine : Beta0 = 2 * epsilona ** 2 * betap0(here betap0=0.3)   ;   epsilona   ;   density profile via n, the Temperature and epsilonRho   ;   The pressure profile using epsilonrho aslo   ;  the flow profile (Omega using epsilon Omega)   ;    the safety factor profile   ;   and the number of sidebands
	#------------
	beta0 = 0.054
	Tr = 0.00
	mach  = x
	#------------

	#Modify VMEC fixed boundary parameters
	C = VMECInput.ReadInputVMEC('VMEC/input/input.Default')

	#Modify some grid and control parameters
	#==========================================================================
	C.Grid.MPOL = 15    #Number of poloidal modes used
	C.Grid.NTOR = 0		#Set 2D	
	C.Grid.LASYM = 'F'	#Weather or not to violate stellarator symmetry.
	C.Grid.NZETA = 16   #Number ot toroidal planes. Important in free boundary calculations
	C.Grid.LRFP = 'F'   #Weather to use toroidal (F) or poloidal (T) normalized flux as radial variable. Note that if poloidal flux is used, 'q' needs to be provided instead of 'iota'.
	C.FreeB.LFREEB = 'F'    #Set the simulation to be fixed boundary
	#==========================================================================



	#Boundary
	#====================================================================
	epsilon_a = 0.3
	mu0 = 4.*np.pi*1.0E-07
	r0 = 1.0
	R0 = r0/epsilon_a
	#R0 = 3.0
	B0  = 1.0
	D = 0.00 #Shafranov Shift
	El = 0.00 #Elongation

	n = [0,0,0] #n and m are linked to the mode nb for R and Z at the boundaries 
	m = [0,1,2]
	RBC = [R0,r0-El,Tr]
	ZBS = [0.,r0+El,-Tr]
	RAXIS = [RBC[0]]
	ZAXIS = [0.]

	C.Boundary.PHIEDGE = np.pi*r0**2.*B0
	C.Boundary.RAXIS = RAXIS
	C.Boundary.ZAXIS = ZAXIS
	C.Boundary.RBCn  = n
	C.Boundary.RBCm  = m
	C.Boundary.RBC   = RBC
	C.Boundary.ZBSn  = n
	C.Boundary.ZBSm  = m
	C.Boundary.ZBS   = ZBS
	#====================================================================

	#Grid
	#==========================
	s2 = np.linspace(0.,1.,100)
	s  = np.sqrt(s2)
	#==========================


	#Density profile. This is not a VMEC input, but sometimes it is useful to 
	#define it so that we can set the pressure or temperature with respect 
	#==============================================================================
	epsilon_rho = 0.3
	n_ = 1.-(epsilon_a/epsilon_rho)**2.*s2
	#n_ = np.ones_like(s)
	#==============================================================================



	#Temperature and rotation profiles. Note that The output AT and AH will be the 
	#same as the input, but for the computation VMEC will normalize the profiles as
	#T --> T/T0, Omega --> Omega/Omega0. 
	#==============================================================================

	T = np.ones_like(s)
	#T = 1-s2+0.05    !!! Celine Uncomment for flat density
	#Set the temperature constant, which makes the density equal to the pressure
	AT = np.polyfit(s2,T,11)[::-1]
	C.Flow.AT = AT
	#------------------------------------------------------------------------------
	epsilon_omega = 0.3
	#Omega = 1.-(epsilon_a/epsilon_omega)**2.*s2
	Omega = np.ones_like(s)
	AH = np.polyfit(s2,Omega,11)[::-1]

	C.Flow.AH = AH
	C.Flow.bcrit = mach
	#==============================================================================


	#Pressure Profile
	#===============================================================
	#Parameters for the model.
	#----------------------------------------
	P = beta0*B0**2.*(1.-(epsilon_a/epsilon_rho)**2*s2)/(2.*mu0)
	#P = beta0*B0**2.*(np.ones_like(s))/(2.*mu0)
	
	PVMEC = P*np.exp(-0.5*mach**2*Omega**2./T)

	AM = np.polyfit(s2,PVMEC,11)[::-1]
	#----------------------------------------

	#Set the profiles in VMEC
	C.Pressure.AM    = AM
	C.Pressure.PRES_SCALE = 1.
	#===============================================================


	C.Current.NCURR  = 0     #0 for rotational transform, 1 for toroidal current density
	# #Rotational transform
	# #===============================================================
	#Arguments
	#----------------------------------------
	r1 = 0.30
	q0 = 0.868
	#q0 = 0.75
	Deltaq = 1.-q0
	L = 2.
	q = 1.-Deltaq*(1.-(s/r1)**L)

	if C.Grid.LRFP == 'F':
		AI = np.polyfit(s2,-1./q,11)[::-1]
	elif C.Grid.LRFP == 'T':
		AI = np.polyfit(s2,-q,11)[::-1]
	else:
		print ('Insert a valid value for LRFP')
		exit()
	#----------------------------------------

	#Set the profiles in VMEC
	C.Current.AI = AI
	# #===============================================================


	#Change some control parameters    !!! Celine you can use these if you need beter equilibrium (more precise) but is is much longer so I keep it commented
	#=============================================================================================================================================
	#C.Control.PREC2D_THRESHOLD = 1.0E-13 
	#C.Control.NITER_ARRAY = [1999, 3999, 3999, 3999, 8999, 8999, 8999, 8999, 8999, 25999, 39999, 99999, 129999]
	#C.Control.NS_ARRAY    = [25, 73, 211, 321, 435, 449, 463, 475, 481, 483, 485, 487, 489]
	#C.Control.FTOL_ARRAY  = [1.0e-09, 1.e-09, 5.0e-10, 5.0e-10, 5.0e-10, 1.0e-10, 5.0e-11, 5.0e-11, 5.0e-11, 5.0e-11, 1.0e-11, 1.0e-11, 5.0E-12]

        #C.Control.PREC2D_THRESHOLD = 1.0E-13 
	#C.Control.NITER_ARRAY = [1999, 3999, 3999, 3999, 8999, 8999, 8999, 8999, 8999, 25999, 39999, 99999, 129999]
	#C.Control.NS_ARRAY    = [25, 73, 211, 321, 435, 449, 463, 475, 481, 483, 485, 487, 489]
	#C.Control.FTOL_ARRAY  = [1.0e-09, 1.e-09, 1.0e-09, 1.0e-09, 1.0e-09, 1.0e-09, 1.0e-09, 1.0e-10, 1.0e-10, 1.0e-10, 1.0e-10, 1.0e-10, 1.0E-10]
	
	#C.Control.PREC2D_THRESHOLD = 1.0E-14 
	#C.Control.NITER_ARRAY = [1999, 3999, 3999, 3999, 8999, 8999, 8999, 8999, 8999, 25999, 39999, 99999, 129999]
	#C.Control.NS_ARRAY    = [25, 73, 211, 321, 435, 449, 463, 475, 481, 483, 485, 487, 489]
	#C.Control.FTOL_ARRAY  = [1.0e-09, 1.e-09, 1.2e-14, 1.2e-14, 1.2e-14, 1.0e-13, 1.0e-13, 1.2e-13, 1.0e-13, 1.0e-13, 1.0e-13, 1.2e-14, 5.0E-17]
	#=============================================================================================================================================


	#Run VMEC Fixed boundary VMEC ''' Celine this saves your equilibrium files
	#========================================================
	#label_FIXED = 'Chapman_%s%.4f'%(Parameter,x)
	label_FIXED = 'Chapman_1sideband02_%s%.4f_HIGHRES'%(Parameter,x)
	DIR_VMEC = 'VMEC/'
	Fout = 'input.'+label_FIXED 
	if RunVMEC:
		#Write the input file
		C.WriteInput(Fout)
		
		#Run VMEC
		os.system(DIR_VMEC+'./xvmec2000_flow_netcdf '+Fout)

		#Create the folders if not existent
		os.system('mkdir -p VMEC/input')
		os.system('mkdir -p VMEC/mercier')
		os.system('mkdir -p VMEC/jxbout')
		os.system('mkdir -p VMEC/threed1')
		os.system('mkdir -p VMEC/wout')

		#Move the output files to their folders
		os.system('mv input.'+label_FIXED+' VMEC/input')
		os.system('mv wout_'+label_FIXED+'.nc VMEC/wout')
		os.system('mv mercier.'+label_FIXED+' VMEC/mercier')
		os.system('mv jxbout_'+label_FIXED+'.nc VMEC/jxbout')
		os.system('mv threed1.'+label_FIXED+' VMEC/threed1')
		os.system('rm dcon_'+label_FIXED+'.txt')
	#========================================================




	#Run stability code
	#=======================================================================================================
	if RunStab:
        
		#Read equilibrium from VMEC output file and transform it into SFL
		eq = SATIRE2SFL.SATIRE2SFL('VMEC/wout/wout_'+label_FIXED+'.nc')
		eq.kappa = 0.
		
		#Create the stability object
		stab = Stability.Stability('IdealMHDFlow-Euler')


		#Modify the default grid ''' Celine Here you can change the number of sidebands
		#---------------------------
		n = -1
		RationalM = 1
		Sidebands = 5
		stab.grid.Mmin = RationalM-Sidebands
		stab.grid.Mmax = RationalM+Sidebands
		stab.grid.Ntheta = eq.R.shape[0]

		stab.grid.N = eq.R.shape[1]-2
		stab.grid.bunching = False
		stab.grid.bunchingQValues = [1.]
		stab.grid.bunchingAmplitudes = [5.,5.,5.,5.]
		stab.grid.bunchingSigma = [0.02,0.02,0.02]
		
		#Build grid. If bunching with q values, then equilibrium quantities (radial grid s and safety factor) are required.
		stab.grid.BuildGrid(eq.s,eq.q)
		#--------------------------------------
		
		
		#Normalize and build the equilibrium quantities in the new grid.
		#-----------------------------------------------
		eq.ChangeGrid(stab.grid.S)
		eq.Normalise()
		eq.BuildInGrid(stab.grid)
		
		eq.Omega = -eq.Omega
		
		V0_VA.append(np.sqrt(eq.M02*eq.mu0*eq.P0)/eq.B0)
		print ('------------VMEC parameters------------')
		print ('M0    = %.5f'%(np.sqrt(eq.M02)))
		print ('v0/vA = %.5f'%(V0_VA[-1]))
		print ('B0    = %.5f / %.5f [T]'%(eq.B0,B0))
		print ('R0    = %.5f [m]'%(eq.R0))
		print ('P0    = %.5f / %.5f [Pa]'%(eq.P0, P[0]))
		print ('beta0 = %.5f / %.5f %%'%(2.*eq.mu0*eq.P0/eq.B0**2.,beta0))
		print ('---------------------------------------\n')
		#-----------------------------------------------

		# Discretize the Operators.
		#----------------------------------------------------------------------------
		stab.Discretize(eq, n)
		#----------------------------------------------------------------------------
		
		#Set eigenvalue guess based on trend
		#----------------------------------------------
		if len(Gamma2Norm) >= 2:
			polycoeff = len(Gamma2Norm)-1
			if polycoeff > 10:
				polycoeff = 10
			Real = np.polyfit(ParamArray[:len(Gamma2Norm)],np.asarray(Gamma2Norm).real,polycoeff)
			Imag = np.polyfit(ParamArray[:len(Gamma2Norm)],np.asarray(Gamma2Norm).imag,polycoeff)
			
			EV_guess = np.polyval(Real,x)*3.+(1.0j)*np.polyval(Imag,x)
			EV_guess += (1.0j)*EV_guess.imag*0.001
		else:
			idx = find_nearest(stab.grid.S,r1)
			EV_guess = 1.0E-02 + (1.0j)*abs(n)*eq.Omega[idx]

		if EV_guess.real < 1.0E-07:
                	EV_guess = 1.0E-03 + (1.0j)*abs(n)*eq.Omega[idx]
		#----------------------------------------------
		
		##Predict the EV guess from file
		##----------------------------------------
		#if len(sys.argv)>1:
			#FileEV = EigenValues.EigenValues(sys.argv[1])
			#param = np.asarray(FileEV.SimID,dtype=float)

			#L = len(param)
			#if L > 10:
				#L = 10

			#Real = np.polyfit(param,FileEV.EV.real,L-1)
			#Imag = np.polyfit(param,FileEV.EV.imag,L-1)

			#param_r = V0_VA[-1]

			#EV_guess = np.polyval(Real,param_r)*3.+(1.0j)*np.polyval(Imag,param_r)
			#EV_guess += (1.0j)*EV_guess.imag*0.001
			#EV_guess = EV_guess[0]

		#else:
			#EV_guess = 1.0E-03 + (1.0j)*abs(n)*(eq.M02*eq.beta0)**0.5
		###----------------------------------------



		# Solve
		#--------------------------------------------------------------------
		t0 = time()
		print ('EV guess: %.5E + i(%.5E)'%(EV_guess.real,EV_guess.imag))
		stab.Solve(EV_guess,N_EV=1, EValuesFile='Test3', EValuesID=V0_VA[-1])
		print ('Solution time: %.4E with N = %i' %(time()-t0, stab.grid.N))
		#--------------------------------------------------------------------
		
		

		EV = max(stab.Solution.vals)
		
		print ('Most unstable eigenvalue')
		print ('(Gamma/OmegaA)^2 = %.5E + i(%.5E)'%(EV.real,EV.imag))
		print ('-----------------------------------------------------------------------------\n')
		
		if ToPlot:
			eq.plot(stab.grid, show=False)
			stab.Solution.PlotEigenValues()
			stab.Solution.PlotEigenVectors(eq, PlotDerivatives=False)
		#------------------------------------------------------------------
	#=====================================================
		if EV < 1E-7:
                        Gamma2Norm.append(EV)
                        break

		'''Ana is the analytical method in plasma phys 16, 112512 (2009) taking for parameters (m,n,rs,gamma,omega0,C,T,R0,B0,mass,beta0,betea1,q0,q1) I putted the values VMEC gives me'''
		Gamma2Norm.append(EV)
		#Ana = Initial(RationalM,n,0.15,5/3,V0_VA[-1],0.53,1,R0,B0,1000,beta0,1,q0,q1)
		Ana = Initial_cond(1,1,V0_VA[-1],r1,eq.aspect**(-1),eq.B0,2.*eq.mu0*eq.P0/eq.B0**2.,1,q0,L,epsilon_rho,epsilon_omega,0.5*(2.*eq.mu0*eq.P0/eq.B0**2.)*eq.R0**2*q0**2,"rho_parab","omega_flat")
		#Ana = Initial_cond(1,1,V0_VA[-1],r1,epsilon_a,B0,beta0,1,q0,L,epsilon_rho,epsilon_omega,0.3,"rho_parab","omega_flat")
		Gamma2NormAna.append(Ana.growth_rate())
		bet.append(x)
		#plt.figure()
		#plt.plot(eq.R[:,-1],eq.Z[:,-1])
		#plt.plot(0.998+0.09,0,'o')
		#plt.plot(0.998,0.09,'o')
		#plt.plot(0.998-0.09,0,'o')
		#plt.plot(0.998,-0.09,'o')
		#plt.axis('equal')
		#plt.show()

#Here I save the growth rates to compare them  ''' Celine  
Gamma2Norm = np.asarray(Gamma2Norm,dtype=complex)
np.savez('Sideband01.npz', x=V0_VA, y=Gamma2Norm.real, z=Gamma2NormAna)
#Gamma2Norm = np.asarray(Gamma2Norm,dtype=complex)


#plt.figure(0)
#plt.plot(V0_VA,Gamma2Norm.real,'x-',label=r'$\gamma/\omega_A$')
#plt.xlabel(xaxis)
#plt.ylabel(r'$\gamma^2/\omega_A^2$')
#plt.grid()
#plt.legend(loc='best')

#plt.figure(1)
#plt.plot(ParamArray,Gamma2Norm.imag,'x-',label=r'$\omega/\omega_A$')
#plt.xlabel(xaxis)
#plt.ylabel(r'$\Omega^2/\omega_A^2$')
#plt.grid()
#plt.legend(loc='best')

#plt.show()
